@page "/bookList/{Id:guid}/edit"
@using zad6.Models
@using zad6.Services
@inject IBookService bookService
@inject NavigationManager navigationManager
<h3>EditBook</h3>

@if (error != "")
{
    <p>@error</p>
}
else
{
<EditForm Model="@Model" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <label class="form-label">Id</label>
    <p class="form-control">@Id</p>
    <label class="form-label">Title</label>
    <InputText class="form-control" @bind-Value="Model.Title" type="text"/>
    <label class="form-label">Author</label>
    <InputText class="form-control" @bind-Value="Model.Author" type="text"/>
    <label class="form-label">Synopsis</label>
    <InputTextArea class="form-control" @bind-Value="Model.Synopsis"></InputTextArea>
    <label class="form-label">Rating</label>
    <InputNumber class="form-control" @bind-Value="Model.Rating" type="number" min="1" max="5" step="1"/>

    <button class="btn btn-primary mt-5" type="submit">Edit</button>
</EditForm>
    
}
@code {
    [Parameter]
    public Guid Id { get; set; }
    public BookDTO? Model { get; set; }
    private string error = "";
    
    
    protected override async Task OnInitializedAsync()
    {
        var book = await bookService.FetchBookAsync(Id);
        if (book is null)
        {
            error = "couldnt find book";
        }
        Model = new BookDTO()
        {
            Title = book.Title,
            Author = book.Author,
            Synopsis = book.Synopsis,
            Rating = book.Rating
        };
    }

    private async Task OnSubmit()
    {
        await bookService.UpdateBookAsync(Id, Model);
        navigationManager.NavigateTo($"/bookList/{Id}");
    }
}